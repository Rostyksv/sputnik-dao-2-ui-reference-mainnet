{"id":"aL6p","dependencies":[{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/package.json","includedInParent":true,"mtime":1709230653658},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/qrcode/package.json","includedInParent":true,"mtime":1693298556062},{"name":"./utils","loc":{"line":1,"column":22},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/qrcode/lib/core/format-info.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/qrcode/lib/core/utils.js"}],"generated":{"js":"var t=require(\"./utils\"),i=1335,e=21522,r=t.getBCHDigit(i);exports.getEncodedBits=function(g,n){for(var o=g.bit<<3|n,u=o<<10;t.getBCHDigit(u)-r>=0;)u^=i<<t.getBCHDigit(u)-r;return(o<<10|u)^e};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"Utils","original":{"line":1,"column":6},"generated":{"line":1,"column":4}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"require","original":{"line":1,"column":14},"generated":{"line":1,"column":6}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":1,"column":22},"generated":{"line":1,"column":14}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15","original":{"line":3,"column":6},"generated":{"line":1,"column":25}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":3,"column":13},"generated":{"line":1,"column":27}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15_MASK","original":{"line":4,"column":6},"generated":{"line":1,"column":32}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":4,"column":18},"generated":{"line":1,"column":34}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15_BCH","original":{"line":5,"column":6},"generated":{"line":1,"column":40}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"Utils","original":{"line":5,"column":16},"generated":{"line":1,"column":42}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"getBCHDigit","original":{"line":5,"column":22},"generated":{"line":1,"column":44}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15","original":{"line":5,"column":34},"generated":{"line":1,"column":56}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"exports","original":{"line":17,"column":0},"generated":{"line":1,"column":59}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"getEncodedBits","original":{"line":17,"column":8},"generated":{"line":1,"column":67}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":17,"column":25},"generated":{"line":1,"column":82}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"errorCorrectionLevel","original":{"line":17,"column":50},"generated":{"line":1,"column":91}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"mask","original":{"line":17,"column":72},"generated":{"line":1,"column":93}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"Utils","original":{"line":21,"column":9},"generated":{"line":1,"column":96}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"data","original":{"line":18,"column":8},"generated":{"line":1,"column":100}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"data","original":{"line":18,"column":8},"generated":{"line":1,"column":104}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"errorCorrectionLevel","original":{"line":18,"column":17},"generated":{"line":1,"column":106}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"bit","original":{"line":18,"column":38},"generated":{"line":1,"column":108}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":18,"column":45},"generated":{"line":1,"column":113}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"mask","original":{"line":18,"column":50},"generated":{"line":1,"column":115}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"d","original":{"line":19,"column":6},"generated":{"line":1,"column":117}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"data","original":{"line":19,"column":10},"generated":{"line":1,"column":119}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":19,"column":18},"generated":{"line":1,"column":122}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"Utils","original":{"line":21,"column":9},"generated":{"line":1,"column":125}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"getBCHDigit","original":{"line":21,"column":15},"generated":{"line":1,"column":127}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"d","original":{"line":21,"column":27},"generated":{"line":1,"column":139}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15_BCH","original":{"line":21,"column":32},"generated":{"line":1,"column":142}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":21,"column":43},"generated":{"line":1,"column":145}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"d","original":{"line":22,"column":4},"generated":{"line":1,"column":148}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15","original":{"line":22,"column":10},"generated":{"line":1,"column":151}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"Utils","original":{"line":22,"column":18},"generated":{"line":1,"column":154}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"getBCHDigit","original":{"line":22,"column":24},"generated":{"line":1,"column":156}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"d","original":{"line":22,"column":36},"generated":{"line":1,"column":168}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15_BCH","original":{"line":22,"column":41},"generated":{"line":1,"column":171}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":28,"column":9},"generated":{"line":1,"column":173}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"data","original":{"line":28,"column":11},"generated":{"line":1,"column":180}},{"source":"../node_modules/qrcode/lib/core/format-info.js","original":{"line":28,"column":19},"generated":{"line":1,"column":183}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"d","original":{"line":28,"column":25},"generated":{"line":1,"column":186}},{"source":"../node_modules/qrcode/lib/core/format-info.js","name":"G15_MASK","original":{"line":28,"column":30},"generated":{"line":1,"column":189}}],"sources":{"../node_modules/qrcode/lib/core/format-info.js":"const Utils = require('./utils')\n\nconst G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)\nconst G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)\nconst G15_BCH = Utils.getBCHDigit(G15)\n\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\nexports.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {\n  const data = ((errorCorrectionLevel.bit << 3) | mask)\n  let d = data << 10\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))\n  }\n\n  // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n  return ((data << 10) | d) ^ G15_MASK\n}\n"},"lineCount":null}},"error":null,"hash":"49c5b88e91ed7c1bc4951ff793c82ebd","cacheData":{"env":{}}}