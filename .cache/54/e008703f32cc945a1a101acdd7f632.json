{"id":"iZ1A","dependencies":[{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js.map","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/src/internal/operators/sequenceEqual.ts","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/package.json","includedInParent":true,"mtime":1709230653658},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/package.json","includedInParent":true,"mtime":1693298556058},{"name":"../util/lift","loc":{"line":1,"column":24},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/lift.js"},{"name":"./OperatorSubscriber","loc":{"line":2,"column":41},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"},{"name":"../observable/innerFrom","loc":{"line":3,"column":26},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.sequenceEqual=u;var e=require(\"../util/lift\"),r=require(\"./OperatorSubscriber\"),t=require(\"../observable/innerFrom\");function u(u,i){return void 0===i&&(i=function(e,r){return e===r}),(0,e.operate)(function(e,o){var c=n(),f=n(),b=function(e){o.next(e),o.complete()},s=function(e,t){var u=(0,r.createOperatorSubscriber)(o,function(r){var u=t.buffer,n=t.complete;0===u.length?n?b(!1):e.buffer.push(r):!i(r,u.shift())&&b(!1)},function(){e.complete=!0;var r=t.complete,n=t.buffer;r&&b(0===n.length),null==u||u.unsubscribe()});return u};e.subscribe(s(c,f)),(0,t.innerFrom)(u).subscribe(s(f,c))})}function n(){return{buffer:[],complete:!1}}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":146,"column":1},"generated":{"line":1,"column":90}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":96}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":98}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":106}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":122}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":124}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":132}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":156}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":158}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":166}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":63,"column":6},"generated":{"line":1,"column":193}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":63,"column":16},"generated":{"line":1,"column":202}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":1,"column":204}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":206}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":209}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":221}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":225}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":229}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":231}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":41},"generated":{"line":1,"column":240}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":44},"generated":{"line":1,"column":242}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":50},"generated":{"line":1,"column":245}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":50},"generated":{"line":1,"column":252}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":65,"column":56},"generated":{"line":1,"column":256}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":261}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":263}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":265}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":274}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":18},"generated":{"line":1,"column":283}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":67,"column":26},"generated":{"line":1,"column":285}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":69,"column":10},"generated":{"line":1,"column":288}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":69,"column":10},"generated":{"line":1,"column":292}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":69,"column":19},"generated":{"line":1,"column":294}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":71,"column":10},"generated":{"line":1,"column":298}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":71,"column":19},"generated":{"line":1,"column":300}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":74,"column":10},"generated":{"line":1,"column":304}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":74,"column":17},"generated":{"line":1,"column":306}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":74,"column":18},"generated":{"line":1,"column":315}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":75,"column":6},"generated":{"line":1,"column":318}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":75,"column":17},"generated":{"line":1,"column":320}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":75,"column":22},"generated":{"line":1,"column":325}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":76,"column":6},"generated":{"line":1,"column":328}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":76,"column":17},"generated":{"line":1,"column":330}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":84,"column":10},"generated":{"line":1,"column":342}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":84,"column":29},"generated":{"line":1,"column":344}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":84,"column":30},"generated":{"line":1,"column":353}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":84,"column":59},"generated":{"line":1,"column":355}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":1,"column":358}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":1,"column":362}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":85,"column":38},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":1,"column":367}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":1,"column":369}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":1,"column":395}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":87,"column":8},"generated":{"line":1,"column":397}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":87,"column":9},"generated":{"line":1,"column":406}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":18},"generated":{"line":1,"column":409}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":18},"generated":{"line":1,"column":413}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":39},"generated":{"line":1,"column":415}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":49},"generated":{"line":1,"column":417}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":26},"generated":{"line":1,"column":424}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":39},"generated":{"line":1,"column":426}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":88,"column":49},"generated":{"line":1,"column":428}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":89,"column":32},"generated":{"line":1,"column":437}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":89,"column":14},"generated":{"line":1,"column":441}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":1,"column":443}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":12},"generated":{"line":1,"column":450}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":23},"generated":{"line":1,"column":452}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":28},"generated":{"line":1,"column":455}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":37},"generated":{"line":1,"column":458}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":47},"generated":{"line":1,"column":460}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":54},"generated":{"line":1,"column":467}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":96,"column":59},"generated":{"line":1,"column":472}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":13},"generated":{"line":1,"column":476}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":24},"generated":{"line":1,"column":478}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":27},"generated":{"line":1,"column":480}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":34},"generated":{"line":1,"column":482}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":47},"generated":{"line":1,"column":492}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":101,"column":52},"generated":{"line":1,"column":495}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":104,"column":8},"generated":{"line":1,"column":499}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":106,"column":10},"generated":{"line":1,"column":510}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":106,"column":20},"generated":{"line":1,"column":512}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":106,"column":31},"generated":{"line":1,"column":522}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":18},"generated":{"line":1,"column":524}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":18},"generated":{"line":1,"column":528}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":39},"generated":{"line":1,"column":530}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":49},"generated":{"line":1,"column":532}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":28},"generated":{"line":1,"column":541}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":39},"generated":{"line":1,"column":543}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":107,"column":49},"generated":{"line":1,"column":545}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":112,"column":10},"generated":{"line":1,"column":552}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":112,"column":22},"generated":{"line":1,"column":555}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":112,"column":45},"generated":{"line":1,"column":557}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":112,"column":27},"generated":{"line":1,"column":561}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":112,"column":34},"generated":{"line":1,"column":563}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":114,"column":10},"generated":{"line":1,"column":571}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":114,"column":10},"generated":{"line":1,"column":577}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":114,"column":10},"generated":{"line":1,"column":580}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":114,"column":35},"generated":{"line":1,"column":582}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":118,"column":13},"generated":{"line":1,"column":598}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":118,"column":13},"generated":{"line":1,"column":605}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":122,"column":4},"generated":{"line":1,"column":608}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":122,"column":11},"generated":{"line":1,"column":610}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":122,"column":21},"generated":{"line":1,"column":620}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":122,"column":38},"generated":{"line":1,"column":622}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":122,"column":46},"generated":{"line":1,"column":624}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":14},"generated":{"line":1,"column":629}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":14},"generated":{"line":1,"column":631}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":14},"generated":{"line":1,"column":633}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":14},"generated":{"line":1,"column":644}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":25},"generated":{"line":1,"column":647}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":35},"generated":{"line":1,"column":657}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":52},"generated":{"line":1,"column":659}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":123,"column":60},"generated":{"line":1,"column":661}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":1,"column":667}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":141,"column":9},"generated":{"line":1,"column":676}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":142,"column":9},"generated":{"line":1,"column":680}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":142,"column":9},"generated":{"line":1,"column":686}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":143,"column":4},"generated":{"line":1,"column":687}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":143,"column":12},"generated":{"line":1,"column":694}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":144,"column":4},"generated":{"line":1,"column":697}},{"source":"../../../../src/internal/operators/sequenceEqual.ts","name":null,"original":{"line":144,"column":14},"generated":{"line":1,"column":707}}],"sources":{"../../../../src/internal/operators/sequenceEqual.ts":"import { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Compares all values of two observables in sequence using an optional comparator function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to source observable and `compareTo` `ObservableInput` (that internally\n * gets converted to an observable) and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other completes, the returned observable will never complete.\n *\n * ## Example\n *\n * Figure out if the Konami code matches\n *\n * ```ts\n * import { from, fromEvent, map, bufferCount, mergeMap, sequenceEqual } from 'rxjs';\n *\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent<KeyboardEvent>(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(last11 => from(last11).pipe(sequenceEqual(codes)))\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param compareTo The `ObservableInput` sequence to compare the source sequence to.\n * @param comparator An optional function to compare each value pair.\n *\n * @return A function that returns an Observable that emits a single boolean\n * value representing whether or not the values emitted by the source\n * Observable and provided `ObservableInput` were equal in sequence.\n */\nexport function sequenceEqual<T>(\n  compareTo: ObservableInput<T>,\n  comparator: (a: T, b: T) => boolean = (a, b) => a === b\n): OperatorFunction<T, boolean> {\n  return operate((source, subscriber) => {\n    // The state for the source observable\n    const aState = createState<T>();\n    // The state for the compareTo observable;\n    const bState = createState<T>();\n\n    /** A utility to emit and complete */\n    const emit = (isEqual: boolean) => {\n      subscriber.next(isEqual);\n      subscriber.complete();\n    };\n\n    /**\n     * Creates a subscriber that subscribes to one of the sources, and compares its collected\n     * state -- `selfState` -- to the other source's collected state -- `otherState`. This\n     * is used for both streams.\n     */\n    const createSubscriber = (selfState: SequenceState<T>, otherState: SequenceState<T>) => {\n      const sequenceEqualSubscriber = createOperatorSubscriber(\n        subscriber,\n        (a: T) => {\n          const { buffer, complete } = otherState;\n          if (buffer.length === 0) {\n            // If there's no values in the other buffer\n            // and the other stream is complete, we know\n            // this isn't a match, because we got one more value.\n            // Otherwise, we push onto our buffer, so when the other\n            // stream emits, it can pull this value off our buffer and check it\n            // at the appropriate time.\n            complete ? emit(false) : selfState.buffer.push(a);\n          } else {\n            // If the other stream *does* have values in its buffer,\n            // pull the oldest one off so we can compare it to what we\n            // just got. If it wasn't a match, emit `false` and complete.\n            !comparator(a, buffer.shift()!) && emit(false);\n          }\n        },\n        () => {\n          // Or observable completed\n          selfState.complete = true;\n          const { complete, buffer } = otherState;\n          // If the other observable is also complete, and there's\n          // still stuff left in their buffer, it doesn't match, if their\n          // buffer is empty, then it does match. This is because we can't\n          // possibly get more values here anymore.\n          complete && emit(buffer.length === 0);\n          // Be sure to clean up our stream as soon as possible if we can.\n          sequenceEqualSubscriber?.unsubscribe();\n        }\n      );\n\n      return sequenceEqualSubscriber;\n    };\n\n    // Subscribe to each source.\n    source.subscribe(createSubscriber(aState, bState));\n    innerFrom(compareTo).subscribe(createSubscriber(bState, aState));\n  });\n}\n\n/**\n * A simple structure for the data used to test each sequence\n */\ninterface SequenceState<T> {\n  /** A temporary store for arrived values before they are checked */\n  buffer: T[];\n  /** Whether or not the sequence source has completed. */\n  complete: boolean;\n}\n\n/**\n * Creates a simple structure that is used to represent\n * data used to test each sequence.\n */\nfunction createState<T>(): SequenceState<T> {\n  return {\n    buffer: [],\n    complete: false,\n  };\n}\n"},"lineCount":null}},"error":null,"hash":"a41be20f940315c3ef2f85538e48dfbd","cacheData":{"env":{}}}