{"id":"bQiY","dependencies":[{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js.map","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/src/internal/observable/forkJoin.ts","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/package.json","includedInParent":true,"mtime":1709230653658},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/package.json","includedInParent":true,"mtime":1693298556058},{"name":"../Observable","loc":{"line":1,"column":27},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/Observable.js"},{"name":"../util/argsArgArrayOrObject","loc":{"line":2,"column":37},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js"},{"name":"./innerFrom","loc":{"line":3,"column":26},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"},{"name":"../util/args","loc":{"line":4,"column":34},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/args.js"},{"name":"../operators/OperatorSubscriber","loc":{"line":5,"column":41},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"},{"name":"../util/mapOneOrManyArgs","loc":{"line":6,"column":33},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"},{"name":"../util/createObject","loc":{"line":7,"column":29},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/createObject.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.forkJoin=o;var r=require(\"../Observable\"),e=require(\"../util/argsArgArrayOrObject\"),t=require(\"./innerFrom\"),n=require(\"../util/args\"),i=require(\"../operators/OperatorSubscriber\"),a=require(\"../util/mapOneOrManyArgs\"),u=require(\"../util/createObject\");function o(){for(var o=[],c=0;c<arguments.length;c++)o[c]=arguments[c];var s=(0,n.popResultSelector)(o),b=(0,e.argsArgArrayOrObject)(o),l=b.args,O=b.keys,p=new r.Observable(function(r){var e=l.length;if(e)for(var n=new Array(e),a=e,o=e,c=function(e){var c=!1;(0,t.innerFrom)(l[e]).subscribe((0,i.createOperatorSubscriber)(r,function(r){c||(c=!0,o--),n[e]=r},function(){return a--},void 0,function(){a&&c||(o||r.next(O?(0,u.createObject)(O,n):n),r.complete())}))},s=0;s<e;s++)c(s);else r.complete()});return s?p.pipe((0,a.mapOneOrManyArgs)(s)):p}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":101}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":118}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":128}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":162}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":170}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":185}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":187}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":195}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":211}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":213}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":221}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":256}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":258}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":266}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":294}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":296}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":304}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":6},"generated":{"line":1,"column":328}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":16},"generated":{"line":1,"column":337}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":341}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":345}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":349}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":351}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":354}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":356}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":358}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":360}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":370}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":377}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":381}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":383}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":386}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":396}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":8},"generated":{"line":1,"column":399}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":8},"generated":{"line":1,"column":403}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":25},"generated":{"line":1,"column":406}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":43},"generated":{"line":1,"column":408}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":43},"generated":{"line":1,"column":410}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":43},"generated":{"line":1,"column":429}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":8},"generated":{"line":1,"column":432}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":34},"generated":{"line":1,"column":435}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":55},"generated":{"line":1,"column":437}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":55},"generated":{"line":1,"column":439}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":55},"generated":{"line":1,"column":461}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":16},"generated":{"line":1,"column":464}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":23},"generated":{"line":1,"column":466}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":23},"generated":{"line":1,"column":468}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":25},"generated":{"line":1,"column":473}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":29},"generated":{"line":1,"column":475}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":29},"generated":{"line":1,"column":477}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":8},"generated":{"line":1,"column":482}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":17},"generated":{"line":1,"column":484}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":21},"generated":{"line":1,"column":488}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":17},"generated":{"line":1,"column":490}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":32},"generated":{"line":1,"column":501}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":33},"generated":{"line":1,"column":510}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":12},"generated":{"line":1,"column":513}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":12},"generated":{"line":1,"column":517}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":23},"generated":{"line":1,"column":519}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":30},"generated":{"line":1,"column":521}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":152,"column":8},"generated":{"line":1,"column":528}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":152,"column":9},"generated":{"line":1,"column":531}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":9},"generated":{"line":1,"column":533}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":10},"generated":{"line":1,"column":537}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":10},"generated":{"line":1,"column":541}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":19},"generated":{"line":1,"column":543}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":23},"generated":{"line":1,"column":547}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":29},"generated":{"line":1,"column":553}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":8},"generated":{"line":1,"column":556}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":31},"generated":{"line":1,"column":558}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":158,"column":8},"generated":{"line":1,"column":560}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":158,"column":29},"generated":{"line":1,"column":562}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":564}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":566}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":575}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":10},"generated":{"line":1,"column":578}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":10},"generated":{"line":1,"column":582}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":21},"generated":{"line":1,"column":585}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":1,"column":588}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":1,"column":590}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":1,"column":592}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":1,"column":603}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":24},"generated":{"line":1,"column":605}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":38},"generated":{"line":1,"column":609}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":162,"column":8},"generated":{"line":1,"column":620}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":163,"column":10},"generated":{"line":1,"column":622}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":163,"column":10},"generated":{"line":1,"column":624}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":163,"column":10},"generated":{"line":1,"column":650}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":164,"column":10},"generated":{"line":1,"column":652}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":164,"column":11},"generated":{"line":1,"column":661}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":165,"column":17},"generated":{"line":1,"column":664}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":166,"column":14},"generated":{"line":1,"column":668}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":166,"column":25},"generated":{"line":1,"column":671}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":167,"column":14},"generated":{"line":1,"column":673}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":169,"column":12},"generated":{"line":1,"column":678}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":169,"column":19},"generated":{"line":1,"column":680}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":169,"column":34},"generated":{"line":1,"column":683}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":171,"column":10},"generated":{"line":1,"column":686}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":171,"column":16},"generated":{"line":1,"column":697}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":171,"column":16},"generated":{"line":1,"column":704}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":10},"generated":{"line":1,"column":714}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":173,"column":10},"generated":{"line":1,"column":716}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":174,"column":17},"generated":{"line":1,"column":727}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":174,"column":42},"generated":{"line":1,"column":730}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":175,"column":19},"generated":{"line":1,"column":734}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":16},"generated":{"line":1,"column":737}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":27},"generated":{"line":1,"column":739}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":32},"generated":{"line":1,"column":744}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":39},"generated":{"line":1,"column":747}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":52},"generated":{"line":1,"column":749}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":52},"generated":{"line":1,"column":751}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":52},"generated":{"line":1,"column":765}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":58},"generated":{"line":1,"column":767}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":176,"column":68},"generated":{"line":1,"column":770}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":178,"column":14},"generated":{"line":1,"column":773}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":178,"column":25},"generated":{"line":1,"column":775}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":791}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":27},"generated":{"line":1,"column":793}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":30},"generated":{"line":1,"column":795}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":44},"generated":{"line":1,"column":797}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":52},"generated":{"line":1,"column":799}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":803}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":13},"generated":{"line":1,"column":805}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":153,"column":6},"generated":{"line":1,"column":813}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":153,"column":17},"generated":{"line":1,"column":815}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":1,"column":828}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":1,"column":835}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":26},"generated":{"line":1,"column":837}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":33},"generated":{"line":1,"column":839}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":38},"generated":{"line":1,"column":845}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":55},"generated":{"line":1,"column":847}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":55},"generated":{"line":1,"column":849}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":55},"generated":{"line":1,"column":867}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":185,"column":74},"generated":{"line":1,"column":871}}],"sources":{"../../../../src/internal/observable/forkJoin.ts":"import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInputTuple, ObservableInput } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nimport { AnyCatcher } from '../AnyCatcher';\n\n// forkJoin(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function forkJoin<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// forkJoin(null | undefined)\nexport function forkJoin(scheduler: null | undefined): Observable<never>;\n\n// forkJoin([a, b, c])\nexport function forkJoin(sources: readonly []): Observable<never>;\nexport function forkJoin<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\nexport function forkJoin<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n\n// forkJoin(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n// forkJoin({a, b, c})\nexport function forkJoin(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function forkJoin<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\n * complete immediately if an empty array is passed.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\n * then the resulting stream will complete immediately.\n *\n * `forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, then the resulting\n * array will have `n` values, where the first value is the last one emitted by the first observable,\n * second value is the last one emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, then the resulting\n * objects will have the same keys as the dictionary passed, with their last values they have emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for the resulting array to have the same length as the number of input observables, whenever any of\n * the given observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete either,\n * unless at any point some other observable completes without emitting a value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all given observables\n * have to emit something at least once and complete.\n *\n * If any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\n * from the other observables.\n *\n * Optionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\n * would land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\n * observable instead. This means that the default `resultSelector` can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that the `resultSelector` will be called only\n * when `forkJoin` is supposed to emit a result.\n *\n * ## Examples\n *\n * Use `forkJoin` with a dictionary of observable inputs\n *\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000)\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // 'This is how it ends!' immediately after\n * ```\n *\n * Use `forkJoin` with an array of observable inputs\n *\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000)\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // 'This is how it ends!' immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} args Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(...args: any[]): Observable<any> {\n  const resultSelector = popResultSelector(args);\n  const { args: sources, keys } = argsArgArrayOrObject(args);\n  const result = new Observable((subscriber) => {\n    const { length } = sources;\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            if (!hasValue) {\n              hasValue = true;\n              remainingEmissions--;\n            }\n            values[sourceIndex] = value;\n          },\n          () => remainingCompletions--,\n          undefined,\n          () => {\n            if (!remainingCompletions || !hasValue) {\n              if (!remainingEmissions) {\n                subscriber.next(keys ? createObject(keys, values) : values);\n              }\n              subscriber.complete();\n            }\n          }\n        )\n      );\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n"},"lineCount":null}},"error":null,"hash":"6905721c1bdd560f55a0729edca7c2de","cacheData":{"env":{}}}