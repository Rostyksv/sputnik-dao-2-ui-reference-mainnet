{"id":"Z6Fo","dependencies":[{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js.map","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","includedInParent":true,"mtime":1693298556058},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/package.json","includedInParent":true,"mtime":1709230653658},{"name":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/package.json","includedInParent":true,"mtime":1693298556058},{"name":"../util/identity","loc":{"line":1,"column":25},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/identity.js"},{"name":"../util/lift","loc":{"line":2,"column":24},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/util/lift.js"},{"name":"./OperatorSubscriber","loc":{"line":3,"column":41},"parent":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","resolved":"/Users/rsvitlak/WebstormProjects/sputnik-dao-2-ui-reference-mainnet/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.distinctUntilChanged=i;var e=require(\"../util/identity\"),r=require(\"../util/lift\"),t=require(\"./OperatorSubscriber\");function i(i,u){return void 0===u&&(u=e.identity),i=null!=i?i:n,(0,r.operate)(function(e,r){var n,o=!0;e.subscribe((0,t.createOperatorSubscriber)(r,function(e){var t=u(e);!o&&i(n,t)||(o=!1,n=t,r.next(e))}))})}function n(e,r){return e===r}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":97}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":105}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":113}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":133}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":135}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":143}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":159}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":161}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":169}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":139,"column":6},"generated":{"line":1,"column":193}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":139,"column":16},"generated":{"line":1,"column":202}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":140,"column":2},"generated":{"line":1,"column":204}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":2},"generated":{"line":1,"column":206}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":9},"generated":{"line":1,"column":209}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":2},"generated":{"line":1,"column":221}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":2},"generated":{"line":1,"column":225}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":2},"generated":{"line":1,"column":229}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":33},"generated":{"line":1,"column":231}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":141,"column":2},"generated":{"line":1,"column":233}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":146,"column":2},"generated":{"line":1,"column":243}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":146,"column":15},"generated":{"line":1,"column":245}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":146,"column":15},"generated":{"line":1,"column":251}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":146,"column":15},"generated":{"line":1,"column":253}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":146,"column":29},"generated":{"line":1,"column":255}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":9},"generated":{"line":1,"column":258}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":17},"generated":{"line":1,"column":260}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":17},"generated":{"line":1,"column":262}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":17},"generated":{"line":1,"column":271}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":18},"generated":{"line":1,"column":280}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":148,"column":26},"generated":{"line":1,"column":282}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":151,"column":8},"generated":{"line":1,"column":285}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":151,"column":8},"generated":{"line":1,"column":289}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":1,"column":291}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":153,"column":16},"generated":{"line":1,"column":294}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":155,"column":4},"generated":{"line":1,"column":296}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":155,"column":11},"generated":{"line":1,"column":298}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":6},"generated":{"line":1,"column":309}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":31},"generated":{"line":1,"column":311}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":31},"generated":{"line":1,"column":313}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":31},"generated":{"line":1,"column":339}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":43},"generated":{"line":1,"column":341}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":156,"column":44},"generated":{"line":1,"column":350}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":158,"column":14},"generated":{"line":1,"column":353}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":158,"column":14},"generated":{"line":1,"column":357}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":158,"column":27},"generated":{"line":1,"column":359}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":158,"column":39},"generated":{"line":1,"column":361}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":163,"column":12},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":163,"column":22},"generated":{"line":1,"column":368}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":163,"column":34},"generated":{"line":1,"column":370}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":163,"column":47},"generated":{"line":1,"column":372}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":169,"column":10},"generated":{"line":1,"column":377}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":169,"column":18},"generated":{"line":1,"column":380}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":170,"column":10},"generated":{"line":1,"column":382}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":170,"column":24},"generated":{"line":1,"column":384}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":173,"column":10},"generated":{"line":1,"column":386}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":173,"column":21},"generated":{"line":1,"column":388}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":173,"column":26},"generated":{"line":1,"column":393}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":180,"column":0},"generated":{"line":1,"column":402}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":180,"column":9},"generated":{"line":1,"column":411}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":180,"column":24},"generated":{"line":1,"column":413}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":180,"column":32},"generated":{"line":1,"column":415}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":181,"column":9},"generated":{"line":1,"column":418}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":181,"column":9},"generated":{"line":1,"column":425}},{"source":"../../../../src/internal/operators/distinctUntilChanged.ts","name":null,"original":{"line":181,"column":15},"generated":{"line":1,"column":429}}],"sources":{"../../../../src/internal/operators/distinctUntilChanged.ts":"import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(\n  comparator: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * When provided without parameters or with the first parameter (`{@link distinctUntilChanged#comparator comparator}`),\n * it behaves like this:\n *\n * 1. It will always emit the first value from the source.\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\n *    using the provided `comparator` or an `===` equality check.\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\n *    becomes the new \"previously emitted value\" internally.\n *\n * When the second parameter (`{@link distinctUntilChanged#keySelector keySelector}`) is provided, the behavior\n * changes:\n *\n * 1. It will always emit the first value from the source.\n * 2. The `keySelector` will be run against all values, including the first value.\n * 3. For all values after the first, the selected key will be compared against the key selected from\n *    the previously emitted value using the `comparator`.\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\n *    and the selected key from that value is saved for future comparisons against other keys.\n *\n * ## Examples\n *\n * A very basic example with no `{@link distinctUntilChanged#comparator comparator}`. Note that `1` is emitted more than once,\n * because it's distinct in comparison to the _previously emitted_ value,\n * not in comparison to _all other emitted values_.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\n *   .pipe(distinctUntilChanged())\n *   .subscribe(console.log);\n * // Logs: 1, 2, 1, 3\n * ```\n *\n * With a `{@link distinctUntilChanged#comparator comparator}`, you can do custom comparisons. Let's say\n * you only want to emit a value when all of its components have\n * changed:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const totallyDifferentBuilds$ = of(\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ).pipe(\n *   distinctUntilChanged((prev, curr) => {\n *     return (\n *       prev.engineVersion === curr.engineVersion ||\n *       prev.transmissionVersion === curr.transmissionVersion\n *     );\n *   })\n * );\n *\n * totallyDifferentBuilds$.subscribe(console.log);\n *\n * // Logs:\n * // { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\n * // { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\n * // { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ```\n *\n * You can also provide a custom `{@link distinctUntilChanged#comparator comparator}` to check that emitted\n * changes are only in one direction. Let's say you only want to get\n * the next record temperature:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\n *\n * const recordHighs$ = temps$.pipe(\n *   distinctUntilChanged((prevHigh, temp) => {\n *     // If the current temp is less than\n *     // or the same as the previous record,\n *     // the record hasn't changed.\n *     return temp <= prevHigh;\n *   })\n * );\n *\n * recordHighs$.subscribe(console.log);\n * // Logs: 30, 31, 34, 35\n * ```\n *\n * Selecting update events only when the `updatedBy` field shows\n * the account changed hands.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * // A stream of updates to a given account\n * const accountUpdates$ = of(\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'blesh', data: [] }\n * );\n *\n * // We only want the events where it changed hands\n * const changedHands$ = accountUpdates$.pipe(\n *   distinctUntilChanged(undefined, update => update.updatedBy)\n * );\n *\n * changedHands$.subscribe(console.log);\n * // Logs:\n * // { updatedBy: 'blesh', data: Array[0] }\n * // { updatedBy: 'ncjamieson', data: Array[0] }\n * // { updatedBy: 'blesh', data: Array[0] }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param comparator A function used to compare the previous and current keys for\n * equality. Defaults to a `===` check.\n * @param keySelector Used to select a key value to be passed to the `comparator`.\n *\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T, K>(\n  comparator?: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K = identity as (value: T) => K\n): MonoTypeOperatorFunction<T> {\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\n  // a default value for the parameter, because that will only work\n  // for `undefined`.\n  comparator = comparator ?? defaultCompare;\n\n  return operate((source, subscriber) => {\n    // The previous key, used to compare against keys selected\n    // from new arrivals to determine \"distinctiveness\".\n    let previousKey: K;\n    // Whether or not this is the first value we've gotten.\n    let first = true;\n\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        // We always call the key selector.\n        const currentKey = keySelector(value);\n\n        // If it's the first value, we always emit it.\n        // Otherwise, we compare this key to the previous key, and\n        // if the comparer returns false, we emit.\n        if (first || !comparator!(previousKey, currentKey)) {\n          // Update our state *before* we emit the value\n          // as emission can be the source of re-entrant code\n          // in functional libraries like this. We only really\n          // need to do this if it's the first value, or if the\n          // key we're tracking in previous needs to change.\n          first = false;\n          previousKey = currentKey;\n\n          // Emit the value!\n          subscriber.next(value);\n        }\n      })\n    );\n  });\n}\n\nfunction defaultCompare(a: any, b: any) {\n  return a === b;\n}\n"},"lineCount":null}},"error":null,"hash":"d539f7e61bb0744f044fbf12ac0bae7d","cacheData":{"env":{}}}